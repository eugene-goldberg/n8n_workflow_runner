#!/usr/bin/env python3
"""Debug script to trace Cypher queries generated by the agent"""

import os
import sys
import json
from datetime import datetime

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.config import Config
from src.agents.spyro_agent_enhanced_fixed import create_agent
from neo4j import GraphDatabase

def test_query_with_cypher_trace(question: str):
    """Test a single query and capture the Cypher generated"""
    
    print(f"\n{'='*80}")
    print(f"Testing: {question}")
    print(f"{'='*80}\n")
    
    # Create agent
    config = Config.from_env()
    agent = create_agent(config)
    
    # Monkey patch the text2cypher retriever to log queries
    original_search = agent.text2cypher_retriever.search
    captured_cypher = []
    
    def search_with_logging(query_text: str, **kwargs):
        # Call original search
        result = original_search(query_text, **kwargs)
        
        # Try to extract the generated Cypher
        # The retriever should have generated a Cypher query
        if hasattr(agent.text2cypher_retriever, '_last_cypher'):
            captured_cypher.append(agent.text2cypher_retriever._last_cypher)
        
        # Also check if we can get it from the LLM call
        try:
            # neo4j_graphrag might store the generated query
            if hasattr(result, 'metadata') and 'cypher' in result.metadata:
                captured_cypher.append(result.metadata['cypher'])
        except:
            pass
            
        return result
    
    agent.text2cypher_retriever.search = search_with_logging
    
    # Also check Neo4j query log
    driver = GraphDatabase.driver(
        config.neo4j_uri,
        auth=(config.neo4j_username, config.neo4j_password)
    )
    
    # Run the query
    result = agent.query(question)
    
    print("AGENT RESPONSE:")
    print(f"Answer: {result['answer']}")
    print(f"\nMetadata: {json.dumps(result['metadata'], indent=2)}")
    
    # Check if we captured any Cypher
    if captured_cypher:
        print(f"\nCAPTURED CYPHER QUERIES:")
        for i, cypher in enumerate(captured_cypher, 1):
            print(f"\nQuery {i}:")
            print(cypher)
    else:
        print("\nNO CYPHER QUERIES CAPTURED")
    
    # Try to get recent queries from Neo4j logs
    with driver.session() as session:
        # This might not work depending on Neo4j config, but worth trying
        try:
            result = session.run("CALL dbms.listQueries()")
            queries = list(result)
            if queries:
                print("\nRECENT NEO4J QUERIES:")
                for q in queries[-5:]:  # Last 5 queries
                    print(f"- {q.get('query', 'N/A')}")
        except:
            print("\nCould not retrieve Neo4j query log")
    
    driver.close()
    agent.close()
    
    return result

if __name__ == "__main__":
    # Test the queries that failed
    test_queries = [
        "What percentage of our ARR is dependent on customers with success scores below 70?",
        "How many customers have success scores below 60, and what is their combined ARR?"
    ]
    
    for query in test_queries:
        test_query_with_cypher_trace(query)