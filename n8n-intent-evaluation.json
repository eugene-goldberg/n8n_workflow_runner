{
  "name": "n8n-intent-evaluation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "7ffb4734-9cfe-49f2-b55f-60f63cb17a97",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -288,
        -48
      ],
      "webhookId": "1b518608-05a9-4abf-a753-f15986cac23a"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items from webhook\nconst items = $input.all();\n\n// Get the body from the first (and likely only) item from the webhook\nconst webhookData = items[0].json.body;\n\n// Log to debug\nconsole.log('Full webhook body data:', JSON.stringify(webhookData));\n\n// Extract values\nconst userMessage = webhookData.message || \"No message provided\";\nconst correlationId = webhookData.correlation_id || \"no-correlation-id\";\nconst userId = webhookData.user_id || \"anonymous\";\nconst callbackUrl = webhookData.callback_url || \"\";\n\nconsole.log('Extracted callback_url:', callbackUrl);\nconsole.log('Extracted correlation_id:', correlationId);\n\n// Prepare data for AI Agent instead of simulated response\nreturn [{\n  json: {\n    correlation_id: correlationId,\n    user_id: userId,\n    user_message: userMessage,\n    callback_url: callbackUrl,\n    processed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "d3339372-a36d-4dc1-8df5-cf383bc1d346",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get AI response and original data\nconst aiResponse = $input.first().json;\nconst originalData = $node[\"Process Message\"].json;\n\n// Extract the AI message content\nconst aiMessage = aiResponse.choices?.[0]?.message?.content || aiResponse.text || aiResponse.response || \"No response from AI\";\n\n// Create analysis\nconst analysis = {\n  messageLength: originalData.user_message ? originalData.user_message.length : 0,\n  wordCount: originalData.user_message ? originalData.user_message.split(' ').length : 0,\n  sentiment: originalData.user_message && originalData.user_message.includes('!') ? 'excited' : 'neutral',\n  processingTime: '2.3s',\n  model: aiResponse.model || 'unknown'\n};\n\n// Prepare callback payload\nconst callbackPayload = {\n  correlation_id: originalData.correlation_id,\n  user_id: originalData.user_id,\n  result: `${aiMessage}\\n\\n**Analysis:**\\n- Message length: ${analysis.messageLength} characters\\n- Word count: ${analysis.wordCount} words\\n- Sentiment: ${analysis.sentiment}\\n- Processing time: ${analysis.processingTime}\\n- Model: ${analysis.model}`\n};\n\n// Return formatted data\nreturn [{\n  json: {\n    correlation_id: originalData.correlation_id,\n    user_id: originalData.user_id,\n    original_message: originalData.user_message,\n    ai_response: aiMessage,\n    analysis: analysis,\n    callback_url: originalData.callback_url,\n    callback_payload: callbackPayload,\n    processed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "eeb08a57-6511-40a9-9853-23ef01b83e9c",
      "name": "Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -48
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://172.17.0.1:8000/api/n8n-callback",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.callback_payload}}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "ac158b3f-5d7d-4fc8-9a13-58a809a85191",
      "name": "Send Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        768,
        -48
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "correlation_id": "={{$json.correlation_id}}",
          "message": "AI processing completed",
          "timestamp": "={{new Date().toISOString()}}",
          "ai_model": "={{$json.analysis.model}}"
        },
        "options": {}
      },
      "id": "af0d17f6-009e-44e8-a380-a240a065e459",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        960,
        -48
      ]
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a helpful assistant\nYour job is to evaluate user intent\nYou MUST output the result of your evaluation in a JSON format"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        160,
        -48
      ],
      "id": "8d042c30-f9e0-4baf-9ba1-e7a6ef653b84",
      "name": "Evaluate User Intent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        160
      ],
      "id": "54bdebef-f53d-4eef-81fe-ca918a3b5340",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "D0pjJSKYZnPGABkr",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format AI Response": {
      "main": [
        [
          {
            "node": "Send Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Callback": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate User Intent": {
      "main": [
        [
          {
            "node": "Format AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "821db46e-073f-4f5d-952a-6627db0c3424",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2dd0f09077cf7af158dfada424a1d28458c79600db8c8ae5f72ff0a3bbbebb50"
  },
  "id": "4HPClVhWikFBqqB2",
  "tags": []
}