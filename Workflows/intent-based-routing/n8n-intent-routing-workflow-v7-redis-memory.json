{
  "name": "n8n-intent-routing-workflow-with-redis-memory-v7",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "55348e6c-8fa3-4f6f-a5d8-dcaa1b97f10e",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1536,
        368
      ],
      "webhookId": "125cb2a9-3166-4ae3-8453-442758f70a9a"
    },
    {
      "parameters": {
        "jsCode": "// Extract webhook data\nconst items = $input.all();\nconst webhookData = items[0].json.body;\n\nconst userMessage = webhookData.message || \"No message provided\";\nconst correlationId = webhookData.correlation_id || \"no-correlation-id\";\nconst userId = webhookData.user_id || \"anonymous\";\nconst callbackUrl = webhookData.callback_url || \"\";\n\nreturn [{\n  json: {\n    chatInput: userMessage,\n    correlation_id: correlationId,\n    user_id: userId,\n    user_message: userMessage,\n    callback_url: callbackUrl,\n    processed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "09e52152-4f9b-483e-88d1-d8dafb421b93",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        368
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an intent classification assistant with access to conversation memory through Redis.\n\n  CRITICAL: You have access to the full conversation history. ALWAYS check previous messages first!\n  \n  MEMORY-BASED CLASSIFICATION:\n  - If user previously reported technical issues (login, password, access problems) AND\n  - Current message contains \"still\", \"same\", \"again\", \"yet\", \"continue having\", \"didn't work\"\n  - Then: This is TECHNICAL_SUPPORT with isFollowUp: true\n  \n  CLASSIFICATION RULES - FOLLOW EXACTLY:\n  \n  1. TECHNICAL_SUPPORT (ALWAYS classify these as TECHNICAL_SUPPORT):\n     - ANY login issues: \"can't login\", \"cannot login\", \"login failed\", \"unable to login\", \"I cannot login\"\n     - ANY password issues: \"forgot password\", \"reset password\", \"password not working\"\n     - ANY access issues: \"access denied\", \"can't access\", \"no access\", \"locked out\"\n     - ANY authentication problems: \"2FA issues\", \"verification failed\"\n     - Follow-ups to previous technical issues (check memory!)\n  \n  2. BILLING_QUESTION:\n     - Payment issues, invoices, charges, refunds, subscriptions\n  \n  3. FEATURE_REQUEST:\n     - New feature suggestions, improvements, enhancements\n  \n  4. COMPLAINT:\n     - Angry, frustrated, or dissatisfied messages\n  \n  5. GENERAL_INQUIRY:\n     - ONLY use this if the message doesn't fit ANY of the above categories\n     - Questions about products, services, policies (not technical issues)\n  \n  FOLLOW-UP DETECTION PROCESS:\n  1. Check the conversation memory for previous messages\n  2. If previous messages contain technical issues\n  3. AND current message has follow-up keywords (\"still\", \"same\", \"again\")\n  4. Set isFollowUp: true and intent: TECHNICAL_SUPPORT\n  \n  For contextFromHistory field:\n  - Summarize what the user's previous issue was\n  - Example: \"User previously reported login issues\"\n  \n  TOOL USAGE:\n  For TECHNICAL_SUPPORT: ALWAYS use the Knowledge Base Search tool\n  \n  EXAMPLES:\n  - \"I cannot login\" → TECHNICAL_SUPPORT (confidence: 1.0, isFollowUp: false)\n  - \"I am still having the same issue\" (with login history) → TECHNICAL_SUPPORT (confidence: 1.0, isFollowUp: true, contextFromHistory: \"User previously reported login issues\")\n  \n  IMPORTANT: In the contextFromHistory field, include a summary of ALL previous messages you can see in the conversation memory. If you cannot see any previous messages, write \"No conversation history found\".\n  \n  OUTPUT JSON (nothing else):\n  {\n    \"intent\": \"TECHNICAL_SUPPORT or BILLING_QUESTION or FEATURE_REQUEST or GENERAL_INQUIRY or COMPLAINT\",\n    \"confidence\": 0.0-1.0,\n    \"entities\": [\"list of key entities\"],\n    \"urgency\": \"LOW or MEDIUM or HIGH\",\n    \"suggestedAction\": \"recommended action\",\n    \"contextFromHistory\": \"summary of previous messages if relevant\",\n    \"relatedTickets\": [\"previous ticket IDs if this is a follow-up\"],\n    \"isFollowUp\": true or false,\n    \"escalationReason\": \"reason if escalating\",\n    \"knowledgeBaseResults\": {\n      \"articlesFound\": number,\n      \"topArticle\": \"article title\",\n      \"solution\": \"solution text\"\n    }\n  }"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -208,
        368
      ],
      "id": "d9ead3b7-7942-4d98-a571-51c102c66fef",
      "name": "Evaluate User Intent"
    },
    {
      "parameters": {
        "name": "KnowledgeBaseSearch",
        "description": "Search the technical support knowledge base for solutions to common problems. Input should be a search query string.",
        "jsCode": "// Simulated Knowledge Base Search Tool\n// In production, this would call an actual KB API or database\n\nconst query = $input.query || \"\";\n\n// Simulated KB articles\nconst knowledgeBase = [\n  {\n    id: \"KB001\",\n    title: \"How to Reset Your Password\",\n    tags: [\"password\", \"reset\", \"login\", \"authentication\", \"forgot\"],\n    solution: \"1. Click 'Forgot Password' on login page\\n2. Enter your email\\n3. Check email for reset link\\n4. Create new password (min 8 chars)\\n5. Try logging in with new password\",\n    commonIssues: [\"password expired\", \"forgot password\", \"can't login\", \"reset password\"]\n  },\n  {\n    id: \"KB002\",\n    title: \"Login Troubleshooting Guide\",\n    tags: [\"login\", \"access\", \"authentication\", \"troubleshooting\"],\n    solution: \"1. Clear browser cache and cookies\\n2. Try incognito/private mode\\n3. Disable browser extensions\\n4. Check if account is locked\\n5. Verify correct username/email\\n6. Contact support if issue persists\",\n    commonIssues: [\"can't log in\", \"login failed\", \"access denied\", \"login error\"]\n  },\n  {\n    id: \"KB003\",\n    title: \"Account Locked - What to Do\",\n    tags: [\"account\", \"locked\", \"security\", \"access\"],\n    solution: \"Account locks after 5 failed attempts. Wait 30 minutes or contact support for immediate unlock. Check email for security alert.\",\n    commonIssues: [\"account locked\", \"too many attempts\", \"locked out\"]\n  },\n  {\n    id: \"KB004\",\n    title: \"Two-Factor Authentication Issues\",\n    tags: [\"2fa\", \"authentication\", \"security\", \"code\"],\n    solution: \"1. Ensure correct time on device\\n2. Use backup codes if available\\n3. Try SMS instead of app\\n4. Contact support to reset 2FA\",\n    commonIssues: [\"2fa not working\", \"authentication code\", \"can't get code\"]\n  }\n];\n\n// Simple search algorithm\nconst searchTerms = query.toLowerCase().split(' ');\nconst results = knowledgeBase.map(article => {\n  let score = 0;\n  \n  // Check title\n  searchTerms.forEach(term => {\n    if (article.title.toLowerCase().includes(term)) score += 3;\n  });\n  \n  // Check tags\n  searchTerms.forEach(term => {\n    if (article.tags.some(tag => tag.includes(term))) score += 2;\n  });\n  \n  // Check common issues\n  searchTerms.forEach(term => {\n    if (article.commonIssues.some(issue => issue.includes(term))) score += 1;\n  });\n  \n  return { ...article, score };\n})\n.filter(article => article.score > 0)\n.sort((a, b) => b.score - a.score)\n.slice(0, 3);\n\nif (results.length === 0) {\n  return JSON.stringify({\n    articlesFound: 0,\n    message: \"No relevant articles found\",\n    suggestion: \"Please contact support for assistance\"\n  });\n}\n\nconst response = {\n  articlesFound: results.length,\n  topMatch: {\n    id: results[0].id,\n    title: results[0].title,\n    solution: results[0].solution,\n    relevanceScore: results[0].score\n  },\n  allResults: results.map(r => ({\n    id: r.id,\n    title: r.title,\n    score: r.score\n  }))\n};\n\nreturn JSON.stringify(response);"
      },
      "id": "bd903ea2-b7a9-40f2-b7eb-befec0e64d0b",
      "name": "KnowledgeBaseSearchTool",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        -80,
        768
      ]
    },
    {
      "parameters": {
        "jsCode": " // Parse intent evaluation and prepare for routing\n  const aiResponse = $input.first().json;\n  const originalData = $node[\"Process Message\"].json;\n\n  // Extract intent evaluation\n  let intentData = {};\n  try {\n    // The output field contains the JSON string\n    const aiText = aiResponse.output;\n\n    if (!aiText) {\n      throw new Error('No AI response text found in output field');\n    }\n\n    // Parse the JSON response\n    intentData = JSON.parse(aiText);\n\n  } catch (e) {\n    console.error('Failed to parse intent:', e);\n    console.error('Raw response:', aiResponse);\n    intentData = { intent: 'GENERAL_INQUIRY', confidence: 0.5 };\n  }\n\n  // Prepare data for routing\n  return [{\n    json: {\n      ...originalData,\n      intentEvaluation: intentData,\n      intent: intentData.intent || 'GENERAL_INQUIRY',\n      confidence: intentData.confidence || 0.5,\n      urgency: intentData.urgency || 'MEDIUM',\n      entities: intentData.entities || [],\n      suggestedAction: intentData.suggestedAction || 'Route to general support',\n      contextFromHistory: intentData.contextFromHistory || '',\n      relatedTickets: intentData.relatedTickets || [],\n      isFollowUp: Boolean(intentData.isFollowUp),\n      escalationReason: intentData.escalationReason || '',\n      knowledgeBaseResults: intentData.knowledgeBaseResults || null\n    }\n  }];"
      },
      "id": "c50af86b-f10c-4d83-b371-7a56fb66755b",
      "name": "Prepare for Routing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        368
      ]
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 6,
        "output": "={{ (() => {\n    const intent = $json.intent;\n    const urgency = $json.urgency;\n    const isFollowUp = $json.isFollowUp;\n    const relatedTickets = $json.relatedTickets || [];\n\n    if (isFollowUp && urgency === 'HIGH') { return 5; }\n    if (intent === 'COMPLAINT' && relatedTickets.length > 2) { return 5; }\n    if (intent === 'COMPLAINT' && urgency === 'HIGH') { return 5; }\n\n    const intentMap = {\n      'TECHNICAL_SUPPORT': 0,\n      'BILLING_QUESTION': 1,\n      'FEATURE_REQUEST': 2,\n      'COMPLAINT': 3\n    };\n\n    return intentMap[intent] ?? 4;\n  })() }}"
      },
      "id": "549cb7e2-878d-4ec8-b837-2a814aff50ad",
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        544,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Technical Support Handler with Context and KB Results\nconst data = $input.first().json;\n\n// Build context-aware message\nlet contextMessage = '';\nif (data.isFollowUp && data.relatedTickets.length > 0) {\n  contextMessage = `\\n\\n**Previous Issues:** This appears to be related to ${data.relatedTickets.join(', ')}. ${data.contextFromHistory}`;\n}\n\n// Build KB results message\nlet kbMessage = '';\nif (data.knowledgeBaseResults && data.knowledgeBaseResults.articlesFound > 0) {\n  const kb = data.knowledgeBaseResults;\n  kbMessage = `\\n\\n**Suggested Solution from Knowledge Base:**\\n📚 ${kb.topArticle}\\n\\n${kb.solution}\\n\\nThis solution has helped 89% of users with similar issues.`;\n}\n\n// Process technical support request\nconst response = {\n  ...data,\n  handled_by: 'technical_support',\n  actions_taken: [\n    'Searched knowledge base for: ' + (data.entities || []).join(', '),\n    data.knowledgeBaseResults?.articlesFound > 0 ? \n      `Found ${data.knowledgeBaseResults.articlesFound} relevant KB articles` : \n      'No direct KB matches found',\n    data.isFollowUp ? 'Reviewed previous tickets: ' + data.relatedTickets.join(', ') : 'Created new support ticket',\n    data.urgency === 'HIGH' ? 'Escalated to senior tech team' : 'Assigned to tech team',\n    'Sent acknowledgment to user'\n  ],\n  response_message: `We've received your technical support request. ${data.isFollowUp ? 'We see this is related to your previous issue.' : 'A support ticket has been created.'}${kbMessage}\\n\\nIf the suggested solution doesn't resolve your issue, our technical team will assist you shortly. Your ticket ID is: TECH-${Date.now()}${contextMessage}`,\n  kb_article_provided: data.knowledgeBaseResults?.articlesFound > 0,\n  kb_article_id: data.knowledgeBaseResults?.topArticle || null\n};\n\nreturn [{ json: response }];"
      },
      "id": "bfdfc231-7afe-46b7-bacd-db0278096cff",
      "name": "Handle Tech Support",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "// Billing Questions Handler with Context\nconst data = $input.first().json;\n\n// Build context-aware response\nlet contextMessage = '';\nif (data.contextFromHistory) {\n  contextMessage = `\\n\\n**Context:** ${data.contextFromHistory}`;\n}\n\n// Process billing question\nconst response = {\n  ...data,\n  handled_by: 'billing_department',\n  actions_taken: [\n    'Checked account status',\n    data.isFollowUp ? 'Reviewed conversation history' : 'Reviewed payment history',\n    'Prepared billing summary',\n    'Forwarded to finance team'\n  ],\n  response_message: `Thank you for your billing inquiry. ${data.isFollowUp ? 'Following up on your previous question,' : ''} Our finance team will review your account and respond within 24 hours. Reference number: BILL-${Date.now()}${contextMessage}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "e12c643f-78f6-48b5-a1da-601259467ea2",
      "name": "Handle Billing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Feature Request Handler\nconst data = $input.first().json;\n\n// Process feature request\nconst response = {\n  ...data,\n  handled_by: 'product_team',\n  actions_taken: [\n    'Logged feature request',\n    'Assessed feasibility',\n    'Added to product backlog',\n    'Sent thank you message'\n  ],\n  response_message: `Thank you for your feature suggestion! We've logged your request and our product team will review it. You'll receive updates on its status. Request ID: FEAT-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "6a6918e7-fd6a-4dbc-8019-1116e9d7b7db",
      "name": "Handle Feature Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Complaint Handler with Escalation Context\nconst data = $input.first().json;\n\n// Determine if this needs escalation based on history\nconst needsEscalation = data.relatedTickets.length > 1 || data.escalationReason;\n\n// Process complaint\nconst response = {\n  ...data,\n  handled_by: needsEscalation ? 'senior_customer_service' : 'customer_service',\n  actions_taken: [\n    'Logged complaint with high priority',\n    needsEscalation ? 'ESCALATED to senior management' : 'Created incident report',\n    data.relatedTickets.length > 0 ? `Linked to previous issues: ${data.relatedTickets.join(', ')}` : 'First complaint from user',\n    'Assigned to customer service manager',\n    'Sent apology and acknowledgment'\n  ],\n  response_message: `We sincerely apologize for your experience. ${needsEscalation ? 'Due to the recurring nature of this issue, we have escalated it to senior management.' : 'Your complaint has been logged.'} A ${needsEscalation ? 'senior' : ''} customer service manager will contact you within ${needsEscalation ? '2' : '4'} hours. Incident ID: COMP-${Date.now()}\\n\\n${data.escalationReason ? `Escalation reason: ${data.escalationReason}` : ''}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "fba2989f-9205-4dc9-9b87-ba7d123f8a90",
      "name": "Handle Complaint",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        576
      ]
    },
    {
      "parameters": {
        "jsCode": "// General Inquiry / Fallback Handler\nconst data = $input.first().json;\n\n// Process general inquiry\nconst response = {\n  ...data,\n  handled_by: 'general_support',\n  actions_taken: [\n    'Checked FAQ database',\n    'Prepared general information',\n    'Identified best team for routing',\n    'Sent standard response'\n  ],\n  response_message: `Thank you for contacting us. We've received your inquiry and will route it to the appropriate team. You'll receive a response within 24-48 hours. Reference: GEN-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "88aa71db-1740-4041-b721-4186aa424d91",
      "name": "Handle General Inquiry",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "// HIGH PRIORITY Escalation Handler - For repeated issues or high urgency follow-ups\nconst data = $input.first().json;\n\n// Build escalation context\nconst escalationContext = [];\nif (data.isFollowUp) escalationContext.push('Unresolved follow-up issue');\nif (data.relatedTickets.length > 2) escalationContext.push(`Pattern of ${data.relatedTickets.length} related issues`);\nif (data.escalationReason) escalationContext.push(data.escalationReason);\n\n// Process high-priority escalation\nconst response = {\n  ...data,\n  handled_by: 'executive_escalation',\n  priority: 'CRITICAL',\n  actions_taken: [\n    'IMMEDIATE ESCALATION TRIGGERED',\n    'Notified executive team',\n    'Created priority incident with full history',\n    `Linked previous tickets: ${data.relatedTickets.join(', ')}`,\n    'Initiated emergency response protocol',\n    'Assigned senior manager',\n    'Scheduled immediate callback'\n  ],\n  response_message: `We take your concern extremely seriously. This has been immediately escalated to our executive team due to: ${escalationContext.join(', ')}. A senior manager will contact you within 30 minutes.\\n\\nPriority Case ID: URGENT-${Date.now()}\\n\\nRelated Issues: ${data.relatedTickets.join(', ')}\\n\\nWe apologize for the continued difficulties and are committed to resolving this immediately.`\n};\n\n// Could also trigger additional actions like:\n// - Send SMS to management\n// - Create Slack alert\n// - Email executive team\n\nreturn [{ json: response }];"
      },
      "id": "9da2900a-9382-483d-a1d1-23234e0c1dcb",
      "name": "Handle URGENT Escalation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        1008
      ]
    },
    {
      "parameters": {
        "jsCode": "// Merge all responses and send final callback\nconst response = $input.first().json;\n\n// Prepare enhanced callback payload with context\nconst callbackPayload = {\n  correlation_id: response.correlation_id,\n  user_id: response.user_id,\n  result: response.response_message + `\\n\\n**Processing Details:**\\n- Intent: ${response.intent}\\n- Confidence: ${(response.confidence * 100).toFixed(1)}%\\n- Urgency: ${response.urgency}\\n- Handled by: ${response.handled_by}\\n- Actions taken: ${response.actions_taken.length}\\n- Is follow-up: ${response.isFollowUp ? 'Yes' : 'No'}\\n- Related tickets: ${response.relatedTickets.length > 0 ? response.relatedTickets.join(', ') : 'None'}\\n- KB article provided: ${response.kb_article_provided ? 'Yes' : 'No'}`\n};\n\nreturn [{\n  json: {\n    ...response,\n    callback_payload: callbackPayload\n  }\n}];"
      },
      "id": "442d13fd-10bd-4598-9f43-c5536220b328",
      "name": "Prepare Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        480
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://172.17.0.1:8000/api/n8n-callback",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.callback_payload}}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "ab1ee10a-09c4-4eae-b3e3-1f8cb1ca27fa",
      "name": "Send Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1472,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "correlation_id": "={{$json.correlation_id}}",
          "message": "Request processed and routed successfully",
          "intent": "={{$json.intent}}",
          "handled_by": "={{$json.handled_by}}",
          "isFollowUp": "={{$json.isFollowUp}}",
          "relatedTickets": "={{$json.relatedTickets}}",
          "knowledgeBaseUsed": "={{$json.kb_article_provided}}",
          "timestamp": "={{new Date().toISOString()}}"
        },
        "options": {}
      },
      "id": "e3efcedc-ec5e-474c-b9aa-923be9706ead",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1680,
        480
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -208,
        592
      ],
      "id": "d7ad5a45-5e2b-4e47-81b2-9eafd4e4ee40",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "zYR7ed2XQSB0ybXm",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "sessionId": "={{ $('Process Message').first().json.user_id }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1,
      "position": [
        -208,
        768
      ],
      "id": "redis-memory-node",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "YOUR_REDIS_CREDENTIAL_ID",
          "name": "Redis account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate User Intent": {
      "main": [
        [
          {
            "node": "Prepare for Routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KnowledgeBaseSearchTool": {
      "ai_tool": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Routing": {
      "main": [
        [
          {
            "node": "Route by Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Intent": {
      "main": [
        [
          {
            "node": "Handle Tech Support",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Billing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Feature Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Complaint",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle General Inquiry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle URGENT Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Tech Support": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Billing": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Feature Request": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Complaint": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle General Inquiry": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle URGENT Escalation": {
      "main": [
        [
          {
            "node": "Prepare Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Callback": {
      "main": [
        [
          {
            "node": "Send Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Callback": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Evaluate User Intent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "redis-memory-version-1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2dd0f09077cf7af158dfada424a1d28458c79600db8c8ae5f72ff0a3bbbebb50"
  },
  "id": "RedisMemoryWorkflow",
  "tags": []
}