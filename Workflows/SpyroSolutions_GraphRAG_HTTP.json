{
  "name": "SpyroSolutions_GraphRAG_HTTP",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "spyro-graphrag-http",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "spyro-graphrag-http"
    },
    {
      "parameters": {
        "jsCode": "// Extract query from webhook\nconst query = $json.body?.query || $json.query || 'Show all customers';\n\n// Build Cypher query based on input\nlet cypherQuery = '';\n\nif (query.toLowerCase().includes('revenue') && query.toLowerCase().includes('risk')) {\n  cypherQuery = `\n    MATCH (c:Customer)-[sub:HAS_SUBSCRIPTION]->(p:Product)\n    OPTIONAL MATCH (c)-[:HAS_RISK]->(r:Risk)\n    WITH c, p, sub, collect(r) AS risks\n    RETURN c.name AS customer,\n           c.tier AS tier,\n           p.name AS product,\n           sub.mrr AS monthly_revenue,\n           size(risks) AS risk_count,\n           reduce(total = 0, risk IN risks | total + sub.mrr * risk.impact_factor) AS revenue_at_risk\n    ORDER BY revenue_at_risk DESC\n  `;\n} else if (query.toLowerCase().includes('customer')) {\n  cypherQuery = `\n    MATCH (c:Customer)-[sub:HAS_SUBSCRIPTION]->(p:Product)\n    RETURN c.name AS customer, c.tier AS tier, p.name AS product, sub.mrr AS revenue\n    ORDER BY sub.mrr DESC\n  `;\n} else if (query.toLowerCase().includes('project')) {\n  cypherQuery = `\n    MATCH (t:Team)-[:WORKS_ON]->(proj:Project)\n    OPTIONAL MATCH (proj)-[:DELIVERS_FEATURE]->(c:Customer)\n    RETURN t.name AS team, proj.name AS project, proj.status AS status, \n           collect(c.name) AS customers\n  `;\n} else {\n  // Default overview query\n  cypherQuery = `\n    MATCH (c:Customer) WITH count(c) AS total_customers\n    MATCH (p:Product) WITH total_customers, count(p) AS total_products\n    MATCH (t:Team) WITH total_customers, total_products, count(t) AS total_teams\n    MATCH (r:Risk) WITH total_customers, total_products, total_teams, count(r) AS total_risks\n    RETURN total_customers, total_products, total_teams, total_risks\n  `;\n}\n\nreturn [{\n  json: {\n    query: query,\n    neo4jPayload: {\n      statements: [{\n        statement: cypherQuery,\n        parameters: {}\n      }]\n    }\n  }\n}];"
      },
      "id": "build_query",
      "name": "Build Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://spyro_neo4j:7474/db/neo4j/tx/commit",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.neo4jPayload }}",
        "options": {}
      },
      "id": "neo4j_http",
      "name": "Neo4j HTTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format Neo4j results\nconst originalQuery = $('build_query').item.json.query;\nconst neo4jResponse = $json;\n\n// Extract data from Neo4j response\nconst results = neo4jResponse.results?.[0]?.data || [];\nconst columns = neo4jResponse.results?.[0]?.columns || [];\n\n// Convert Neo4j format to simple objects\nconst formattedData = results.map(row => {\n  const obj = {};\n  columns.forEach((col, idx) => {\n    obj[col] = row.row[idx];\n  });\n  return obj;\n});\n\n// Build response\nconst response = {\n  query: originalQuery,\n  resultCount: formattedData.length,\n  columns: columns,\n  data: formattedData,\n  timestamp: new Date().toISOString()\n};\n\n// Add summary based on query type\nif (originalQuery.toLowerCase().includes('revenue') && originalQuery.toLowerCase().includes('risk')) {\n  const totalAtRisk = formattedData.reduce((sum, r) => sum + (r.revenue_at_risk || 0), 0);\n  response.summary = `Total revenue at risk: $${totalAtRisk.toLocaleString()}`;\n} else if (originalQuery.toLowerCase().includes('customer')) {\n  const totalRevenue = formattedData.reduce((sum, r) => sum + (r.revenue || 0), 0);\n  response.summary = `Total monthly revenue: $${totalRevenue.toLocaleString()}`;\n}\n\nreturn [{ json: response }];"
      },
      "id": "format_response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{
        "node": "Build Query",
        "type": "main",
        "index": 0
      }]]
    },
    "Build Query": {
      "main": [[{
        "node": "Neo4j HTTP",
        "type": "main",
        "index": 0
      }]]
    },
    "Neo4j HTTP": {
      "main": [[{
        "node": "Format Response",
        "type": "main",
        "index": 0
      }]]
    },
    "Format Response": {
      "main": [[{
        "node": "Respond",
        "type": "main",
        "index": 0
      }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}