{
  "name": "AI Chat Workflow - Simple Response",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "c695b66e-7fc3-404a-9053-ccb087cde5c8",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -64,
        224
      ],
      "webhookId": "1b518608-05a9-4abf-a753-f15986cac23a"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items from webhook\nconst items = $input.all();\n\n// Get the body from the first (and likely only) item from the webhook\nconst webhookData = items[0].json.body;\n\n// Log to debug\nconsole.log('Full webhook body data:', JSON.stringify(webhookData));\n\n// Extract values\nconst userMessage = webhookData.message || \"No message provided\";\nconst correlationId = webhookData.correlation_id || \"no-correlation-id\";\nconst userId = webhookData.user_id || \"anonymous\";\nconst callbackUrl = webhookData.callback_url || \"\";\n\nconsole.log('Extracted callback_url:', callbackUrl);\nconsole.log('Extracted correlation_id:', correlationId);\n\n// Simulate processing delay\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\n// Generate simulated response\nconst responses = [\n  `I understand you said: \"${userMessage}\". This is a test response from the n8n workflow.`,\n  `Processing your request: \"${userMessage}\". The workflow is working correctly!`,\n  `Thank you for your message: \"${userMessage}\". The async communication is functioning properly.`,\n  `Received: \"${userMessage}\". This demonstrates the full flow from React → FastAPI → n8n → FastAPI → React.`\n];\n\nconst response = responses[Math.floor(Math.random() * responses.length)];\n\n// Add some analysis\nconst analysis = {\n  messageLength: userMessage ? userMessage.length : 0,\n  wordCount: userMessage ? userMessage.split(' ').length : 0,\n  sentiment: userMessage && userMessage.includes('!') ? 'excited' : 'neutral',\n  processingTime: '1.2s'\n};\n\n// Store webhook response data for the final node\nconst webhookResponse = {\n  success: true,\n  correlation_id: correlationId,\n  message: \"Workflow processing initiated\",\n  timestamp: new Date().toISOString()\n};\n\n// Return in n8n's required format\nreturn [{\n  json: {\n    correlation_id: correlationId,\n    user_id: userId,\n    original_message: userMessage,\n    ai_response: response,\n    analysis: analysis,\n    processed_at: new Date().toISOString(),\n    callback_url: callbackUrl,\n    webhook_response: webhookResponse\n  }\n}];"
      },
      "id": "c315e5a9-e62c-40c4-ac4d-08474a12cc80",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        224
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://172.17.0.1:8000/api/n8n-callback",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"correlation_id\": \"{{$json.correlation_id}}\",\n  \"user_id\": \"{{$json.user_id}}\",\n  \"result\": \"{{$json.ai_response}}\\n\\n**Analysis:**\\n- Message length: {{$json.analysis.messageLength}} characters\\n- Word count: {{$json.analysis.wordCount}} words\\n- Sentiment: {{$json.analysis.sentiment}}\\n- Processing time: {{$json.analysis.processingTime}}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "df2474a3-829e-46f0-9716-a931e14b2a24",
      "name": "Send Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        336,
        224
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json.webhook_response}}",
        "options": {}
      },
      "id": "cc672d9c-9440-47e9-979c-488b28d79aa3",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        544,
        224
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Send Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Callback": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "simple-response-v1",
  "id": "simple-response-workflow",
  "tags": []
}