{
  "parameters": {
    "jsCode": "// Enhanced response formatting with tool display fix\nconst aiResponse = $json.choices[0].message.content;\nconst queryType = $('Build Cypher Query').item.json.queryType;\nconst extraction = $('Extract Entities').item.json.choices[0].message.content;\nconst entities = JSON.parse(extraction).entities;\nconst queryResults = $('Execute Neo4j Query').item.json.results[0].data;\n\n// Tool display fix - getPurpose function\nfunction getPurpose(queryType, entities) {\n  const toolsUsed = [];\n  \n  switch(queryType) {\n    case 'revenue_risk':\n      toolsUsed.push('🔍 Graph Search: Customer Revenue Analysis');\n      toolsUsed.push('⚠️ Risk Assessment: Revenue Impact Calculation');\n      break;\n    case 'commitments':\n      toolsUsed.push('🔍 Graph Search: Customer Commitments');\n      toolsUsed.push('📅 Timeline Analysis: Feature Deadlines');\n      break;\n    case 'relationships':\n      toolsUsed.push('🔍 Graph Search: Entity Relationships');\n      toolsUsed.push('🌐 Network Analysis: Connection Mapping');\n      break;\n    case 'general':\n      toolsUsed.push('📚 Vector Search: Document Similarity');\n      toolsUsed.push('🔍 Entity Extraction: Mentioned Entities');\n      break;\n    default:\n      toolsUsed.push('🔍 Query Processing');\n  }\n  \n  if (entities && entities.length > 0) {\n    toolsUsed.push(`🏷️ Entities Found: ${entities.map(e => e.name).join(', ')}`);\n  }\n  \n  return toolsUsed.join('\\n');\n}\n\n// Format the complete response\nconst toolsDisplay = getPurpose(queryType, entities);\nconst resultsCount = queryResults ? queryResults.length : 0;\n\nconst formattedResponse = `${aiResponse}\n\n**Tools Used:**\n${toolsDisplay}\n\n**Query Stats:**\n- Query Type: ${queryType}\n- Results Found: ${resultsCount}\n- Entities Detected: ${entities.length}`;\n\nreturn [{\n  json: {\n    response: formattedResponse,\n    metadata: {\n      queryType,\n      toolsUsed: toolsDisplay,\n      entitiesFound: entities,\n      resultsCount\n    }\n  }\n}];"
  },
  "id": "format_success_response",
  "name": "Format Success Response",
  "type": "n8n-nodes-base.code",
  "typeVersion": 2,
  "position": [1650, 300]
}