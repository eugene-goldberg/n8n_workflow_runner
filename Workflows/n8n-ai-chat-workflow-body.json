{
  "name": "AI Chat Workflow - Body Access",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Get all input items from webhook\nconst items = $input.all();\nconst webhookItem = items[0].json;\n\n// The webhook data might be in different places depending on configuration\nlet webhookData = {};\n\n// Check if data is directly in json\nif (webhookItem.correlation_id) {\n  webhookData = webhookItem;\n} \n// Check if data is in body (common for webhooks)\nelse if (webhookItem.body) {\n  // If body is a string, parse it\n  if (typeof webhookItem.body === 'string') {\n    try {\n      webhookData = JSON.parse(webhookItem.body);\n    } catch (e) {\n      console.error('Failed to parse body:', e);\n      webhookData = { message: webhookItem.body };\n    }\n  } else {\n    webhookData = webhookItem.body;\n  }\n}\n// Check if data is in query\nelse if (webhookItem.query) {\n  webhookData = webhookItem.query;\n}\n\n// Log what we found\nconsole.log('Webhook item keys:', Object.keys(webhookItem));\nconsole.log('Extracted webhook data:', webhookData);\n\n// Extract values with proper fallbacks\nconst userMessage = webhookData.message || \"No message provided\";\nconst correlationId = webhookData.correlation_id || \"no-correlation-id\";\nconst userId = webhookData.user_id || \"anonymous\";\nconst callbackUrl = webhookData.callback_url || \"\";\n\nconsole.log('Final extracted values:');\nconsole.log('- callback_url:', callbackUrl);\nconsole.log('- correlation_id:', correlationId);\nconsole.log('- user_id:', userId);\nconsole.log('- message:', userMessage);\n\n// Simulate processing delay\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\n// Generate simulated response\nconst responses = [\n  `I understand you said: \"${userMessage}\". This is a test response from the n8n workflow.`,\n  `Processing your request: \"${userMessage}\". The workflow is working correctly!`,\n  `Thank you for your message: \"${userMessage}\". The async communication is functioning properly.`,\n  `Received: \"${userMessage}\". This demonstrates the full flow from React → FastAPI → n8n → FastAPI → React.`\n];\n\nconst response = responses[Math.floor(Math.random() * responses.length)];\n\n// Add some analysis\nconst analysis = {\n  messageLength: userMessage ? userMessage.length : 0,\n  wordCount: userMessage ? userMessage.split(' ').length : 0,\n  sentiment: userMessage && userMessage.includes('!') ? 'excited' : 'neutral',\n  processingTime: '1.2s'\n};\n\n// Return in n8n's required format\nreturn [{\n  json: {\n    correlation_id: correlationId,\n    user_id: userId,\n    original_message: userMessage,\n    ai_response: response,\n    analysis: analysis,\n    processed_at: new Date().toISOString(),\n    callback_url: callbackUrl,\n    debug_info: {\n      webhook_item_keys: Object.keys(webhookItem),\n      found_in: webhookData === webhookItem ? 'direct' : 'body or query'\n    }\n  }\n}];"
      },
      "id": "process-message",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "={{$json.callback_url}}",
        "authentication": "none",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"correlation_id\": \"{{$json.correlation_id}}\",\n  \"user_id\": \"{{$json.user_id}}\",\n  \"result\": \"{{$json.ai_response}}\\n\\n**Analysis:**\\n- Message length: {{$json.analysis.messageLength}} characters\\n- Word count: {{$json.analysis.wordCount}} words\\n- Sentiment: {{$json.analysis.sentiment}}\\n- Processing time: {{$json.analysis.processingTime}}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-callback",
      "name": "Send Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "correlation_id": "={{$json.correlation_id}}",
          "message": "Workflow processing completed",
          "timestamp": "={{new Date().toISOString()}}",
          "debug": "={{$json.debug_info}}"
        },
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Send Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Callback": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "id": "ai-chat-body"
}