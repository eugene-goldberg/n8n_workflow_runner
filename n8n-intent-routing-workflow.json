{
  "name": "Intent-Based Routing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-288, 0]
    },
    {
      "parameters": {
        "jsCode": "// Extract webhook data\nconst items = $input.all();\nconst webhookData = items[0].json.body;\n\nconst userMessage = webhookData.message || \"No message provided\";\nconst correlationId = webhookData.correlation_id || \"no-correlation-id\";\nconst userId = webhookData.user_id || \"anonymous\";\nconst callbackUrl = webhookData.callback_url || \"\";\n\nreturn [{\n  json: {\n    chatInput: userMessage,\n    correlation_id: correlationId,\n    user_id: userId,\n    user_message: userMessage,\n    callback_url: callbackUrl,\n    processed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "process-message",
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-80, 0]
    },
    {
      "parameters": {
        "prompt": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an intent classification assistant. Analyze the user's message and classify their intent.\n\nYou MUST output a JSON object with this structure:\n{\n  \"intent\": \"one of: TECHNICAL_SUPPORT, BILLING_QUESTION, FEATURE_REQUEST, GENERAL_INQUIRY, COMPLAINT\",\n  \"confidence\": 0.0-1.0,\n  \"entities\": [\"list of key entities mentioned\"],\n  \"urgency\": \"LOW, MEDIUM, HIGH\",\n  \"suggestedAction\": \"brief description of recommended action\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [160, 0],
      "id": "evaluate-intent",
      "name": "Evaluate User Intent"
    },
    {
      "parameters": {
        "jsCode": "// Parse intent evaluation and prepare for routing\nconst aiResponse = $input.first().json;\nconst originalData = $node[\"Process Message\"].json;\n\n// Extract intent evaluation\nlet intentData = {};\ntry {\n  const aiText = aiResponse.text || aiResponse.output || aiResponse.response || \"{}\";\n  intentData = typeof aiText === 'string' ? JSON.parse(aiText) : aiText;\n} catch (e) {\n  console.error('Failed to parse intent:', e);\n  intentData = { intent: 'GENERAL_INQUIRY', confidence: 0.5 };\n}\n\n// Log for debugging\nconsole.log('Parsed intent data:', intentData);\nconsole.log('Intent:', intentData.intent);\nconsole.log('Urgency:', intentData.urgency);\n\n// Prepare data for routing\nreturn [{\n  json: {\n    ...originalData,\n    intentEvaluation: intentData,\n    intent: intentData.intent || 'GENERAL_INQUIRY',\n    confidence: intentData.confidence || 0.5,\n    urgency: intentData.urgency || 'MEDIUM',\n    entities: intentData.entities || [],\n    suggestedAction: intentData.suggestedAction || 'Route to general support'\n  }\n}];"
      },
      "id": "prepare-routing",
      "name": "Prepare for Routing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "mode": "expression",
        "output": 6,
        "outputIndex": "={{ (() => { const intent = $json.intent; const urgency = $json.urgency; if (intent === 'COMPLAINT' && urgency === 'HIGH') { return 5; } const intentMap = { 'TECHNICAL_SUPPORT': 0, 'BILLING_QUESTION': 1, 'FEATURE_REQUEST': 2, 'COMPLAINT': 3 }; return intentMap[intent] ?? 4; })() }}"
      },
      "id": "intent-router",
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [640, 0]
    },
    {
      "parameters": {
        "jsCode": "// Technical Support Handler\nconst data = $input.first().json;\n\n// Process technical support request\nconst response = {\n  ...data,\n  handled_by: 'technical_support',\n  actions_taken: [\n    'Searched knowledge base for: ' + (data.entities || []).join(', '),\n    'Created support ticket',\n    'Assigned to tech team',\n    'Sent acknowledgment to user'\n  ],\n  response_message: `We've received your technical support request. A support ticket has been created and our technical team will assist you shortly. Your ticket ID is: TECH-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "tech-support-handler",
      "name": "Handle Tech Support",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, -400]
    },
    {
      "parameters": {
        "jsCode": "// Billing Questions Handler\nconst data = $input.first().json;\n\n// Process billing question\nconst response = {\n  ...data,\n  handled_by: 'billing_department',\n  actions_taken: [\n    'Checked account status',\n    'Reviewed payment history',\n    'Prepared billing summary',\n    'Forwarded to finance team'\n  ],\n  response_message: `Thank you for your billing inquiry. Our finance team will review your account and respond within 24 hours. Reference number: BILL-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "billing-handler",
      "name": "Handle Billing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, -200]
    },
    {
      "parameters": {
        "jsCode": "// Feature Request Handler\nconst data = $input.first().json;\n\n// Process feature request\nconst response = {\n  ...data,\n  handled_by: 'product_team',\n  actions_taken: [\n    'Logged feature request',\n    'Assessed feasibility',\n    'Added to product backlog',\n    'Sent thank you message'\n  ],\n  response_message: `Thank you for your feature suggestion! We've logged your request and our product team will review it. You'll receive updates on its status. Request ID: FEAT-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "feature-handler",
      "name": "Handle Feature Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 0]
    },
    {
      "parameters": {
        "jsCode": "// Complaint Handler (Normal Priority)\nconst data = $input.first().json;\n\n// Process standard complaint\nconst response = {\n  ...data,\n  handled_by: 'customer_service',\n  actions_taken: [\n    'Logged complaint',\n    'Created incident report',\n    'Assigned to customer service manager',\n    'Sent apology and acknowledgment'\n  ],\n  response_message: `We sincerely apologize for your experience. Your complaint has been logged and a customer service manager will contact you within 4 hours. Incident ID: COMP-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "complaint-handler",
      "name": "Handle Complaint",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 200]
    },
    {
      "parameters": {
        "jsCode": "// General Inquiry / Fallback Handler\nconst data = $input.first().json;\n\n// Process general inquiry\nconst response = {\n  ...data,\n  handled_by: 'general_support',\n  actions_taken: [\n    'Checked FAQ database',\n    'Prepared general information',\n    'Identified best team for routing',\n    'Sent standard response'\n  ],\n  response_message: `Thank you for contacting us. We've received your inquiry and will route it to the appropriate team. You'll receive a response within 24-48 hours. Reference: GEN-${Date.now()}`\n};\n\nreturn [{ json: response }];"
      },
      "id": "general-handler",
      "name": "Handle General Inquiry",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 400]
    },
    {
      "parameters": {
        "jsCode": "// HIGH PRIORITY Complaint Escalation Handler\nconst data = $input.first().json;\n\n// Process high-priority complaint with immediate escalation\nconst response = {\n  ...data,\n  handled_by: 'executive_escalation',\n  priority: 'CRITICAL',\n  actions_taken: [\n    'IMMEDIATE ESCALATION TRIGGERED',\n    'Notified executive team',\n    'Created priority incident',\n    'Initiated emergency response protocol',\n    'Assigned senior manager',\n    'Scheduled immediate callback'\n  ],\n  response_message: `We take your concern extremely seriously. This has been immediately escalated to our executive team. A senior manager will contact you within 30 minutes. Priority Case ID: URGENT-${Date.now()}`\n};\n\n// Could also trigger additional actions like:\n// - Send SMS to management\n// - Create Slack alert\n// - Email executive team\n\nreturn [{ json: response }];"
      },
      "id": "urgent-complaint-handler",
      "name": "Handle URGENT Complaint",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 600]
    },
    {
      "parameters": {
        "jsCode": "// Merge all responses and send final callback\nconst response = $input.first().json;\n\n// Prepare callback payload\nconst callbackPayload = {\n  correlation_id: response.correlation_id,\n  user_id: response.user_id,\n  result: response.response_message + `\\n\\n**Processing Details:**\\n- Intent: ${response.intent}\\n- Confidence: ${(response.confidence * 100).toFixed(1)}%\\n- Urgency: ${response.urgency}\\n- Handled by: ${response.handled_by}\\n- Actions taken: ${response.actions_taken.length}`\n};\n\nreturn [{\n  json: {\n    ...response,\n    callback_payload: callbackPayload\n  }\n}];"
      },
      "id": "prepare-callback",
      "name": "Prepare Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://172.17.0.1:8000/api/n8n-callback",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.callback_payload}}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-callback",
      "name": "Send Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1320, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "correlation_id": "={{$json.correlation_id}}",
          "message": "Request processed and routed successfully",
          "intent": "={{$json.intent}}",
          "handled_by": "={{$json.handled_by}}",
          "timestamp": "={{new Date().toISOString()}}"
        },
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1520, 100]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [160, 200],
      "id": "openai-model",
      "name": "OpenAI Chat Model"
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{ "node": "Process Message", "type": "main", "index": 0 }]]
    },
    "Process Message": {
      "main": [[{ "node": "Evaluate User Intent", "type": "main", "index": 0 }]]
    },
    "Evaluate User Intent": {
      "main": [[{ "node": "Prepare for Routing", "type": "main", "index": 0 }]]
    },
    "Prepare for Routing": {
      "main": [[{ "node": "Route by Intent", "type": "main", "index": 0 }]]
    },
    "Route by Intent": {
      "main": [
        [{ "node": "Handle Tech Support", "type": "main", "index": 0 }],
        [{ "node": "Handle Billing", "type": "main", "index": 0 }],
        [{ "node": "Handle Feature Request", "type": "main", "index": 0 }],
        [{ "node": "Handle Complaint", "type": "main", "index": 0 }],
        [{ "node": "Handle General Inquiry", "type": "main", "index": 0 }],
        [{ "node": "Handle URGENT Complaint", "type": "main", "index": 0 }]
      ]
    },
    "Handle Tech Support": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Handle Billing": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Handle Feature Request": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Handle Complaint": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Handle General Inquiry": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Handle URGENT Complaint": {
      "main": [[{ "node": "Prepare Callback", "type": "main", "index": 0 }]]
    },
    "Prepare Callback": {
      "main": [[{ "node": "Send Callback", "type": "main", "index": 0 }]]
    },
    "Send Callback": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [[{ "node": "Evaluate User Intent", "type": "ai_languageModel", "index": 0 }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "id": "intent-routing-complete",
  "tags": []
}